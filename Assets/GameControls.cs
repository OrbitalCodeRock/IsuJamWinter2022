//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""GeneralGameplay"",
            ""id"": ""d2a01cae-9ad9-4715-995f-487757d9301c"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""0d34fbbb-0272-4c5a-99ac-53a1a48fb764"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BoxSelect"",
                    ""type"": ""Button"",
                    ""id"": ""83bc8313-a7d4-4a77-831e-ca35364cb714"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Command"",
                    ""type"": ""Button"",
                    ""id"": ""3c49fa58-7592-4a92-b1ab-752d527fdaff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc3ad086-df65-4ee0-a362-65e640ab8ba3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5549ee3c-b5f7-4d60-885e-34d795bd92f2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""BoxSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc6cf73d-c5d1-4719-a599-bc4c60d4784f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Command"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // GeneralGameplay
        m_GeneralGameplay = asset.FindActionMap("GeneralGameplay", throwIfNotFound: true);
        m_GeneralGameplay_Select = m_GeneralGameplay.FindAction("Select", throwIfNotFound: true);
        m_GeneralGameplay_BoxSelect = m_GeneralGameplay.FindAction("BoxSelect", throwIfNotFound: true);
        m_GeneralGameplay_Command = m_GeneralGameplay.FindAction("Command", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GeneralGameplay
    private readonly InputActionMap m_GeneralGameplay;
    private IGeneralGameplayActions m_GeneralGameplayActionsCallbackInterface;
    private readonly InputAction m_GeneralGameplay_Select;
    private readonly InputAction m_GeneralGameplay_BoxSelect;
    private readonly InputAction m_GeneralGameplay_Command;
    public struct GeneralGameplayActions
    {
        private @GameControls m_Wrapper;
        public GeneralGameplayActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_GeneralGameplay_Select;
        public InputAction @BoxSelect => m_Wrapper.m_GeneralGameplay_BoxSelect;
        public InputAction @Command => m_Wrapper.m_GeneralGameplay_Command;
        public InputActionMap Get() { return m_Wrapper.m_GeneralGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralGameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralGameplayActions instance)
        {
            if (m_Wrapper.m_GeneralGameplayActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnSelect;
                @BoxSelect.started -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnBoxSelect;
                @BoxSelect.performed -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnBoxSelect;
                @BoxSelect.canceled -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnBoxSelect;
                @Command.started -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnCommand;
                @Command.performed -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnCommand;
                @Command.canceled -= m_Wrapper.m_GeneralGameplayActionsCallbackInterface.OnCommand;
            }
            m_Wrapper.m_GeneralGameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @BoxSelect.started += instance.OnBoxSelect;
                @BoxSelect.performed += instance.OnBoxSelect;
                @BoxSelect.canceled += instance.OnBoxSelect;
                @Command.started += instance.OnCommand;
                @Command.performed += instance.OnCommand;
                @Command.canceled += instance.OnCommand;
            }
        }
    }
    public GeneralGameplayActions @GeneralGameplay => new GeneralGameplayActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IGeneralGameplayActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnBoxSelect(InputAction.CallbackContext context);
        void OnCommand(InputAction.CallbackContext context);
    }
}
